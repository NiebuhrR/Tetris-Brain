#BlueJ class context
comment0.params=aWidth\ aHeight
comment0.target=Board(int,\ int)
comment0.text=\n\ \ \ \ \ Creates\ an\ empty\ board\ of\ the\ given\ width\ and\ height\n\ \ \ \ \ measured\ in\ blocks.\n
comment1.params=
comment1.target=int\ getWidth()
comment1.text=\n\ \ \ \ \ Returns\ the\ width\ of\ the\ board\ in\ blocks.\n
comment10.params=
comment10.target=boolean\ clearRows()
comment10.text=\n\ \ \ \ \ Deletes\ rows\ that\ are\ filled\ all\ the\ way\ across,\ moving\n\ \ \ \ \ things\ above\ down.\ Returns\ true\ if\ any\ row\ clearing\ happened.\n\ \ \ \ \ \n\ \ \ \ \ <p>Implementation\:\ This\ is\ complicated.\n\ \ \ \ \ Ideally,\ you\ want\ to\ copy\ each\ row\ down\n\ \ \ \ \ to\ its\ correct\ location\ in\ one\ pass.\n\ \ \ \ \ Note\ that\ more\ than\ one\ row\ may\ be\ filled.\n
comment11.params=
comment11.target=void\ undo()
comment11.text=\n\ \ \ \ \ If\ a\ place()\ happens,\ optionally\ followed\ by\ a\ clearRows(),\n\ \ \ \ \ a\ subsequent\ undo()\ reverts\ the\ board\ to\ its\ state\ before\n\ \ \ \ \ the\ place().\ If\ the\ conditions\ for\ undo()\ are\ not\ met,\ such\ as\n\ \ \ \ \ calling\ undo()\ twice\ in\ a\ row,\ then\ the\ second\ undo()\ does\ nothing.\n\ \ \ \ \ See\ the\ overview\ docs.\n
comment12.params=
comment12.target=void\ commit()
comment12.text=\n\ \ \ \ \ Puts\ the\ board\ in\ the\ committed\ state.\n\ \ \ \ \ See\ the\ overview\ docs.\n
comment2.params=
comment2.target=int\ getHeight()
comment2.text=\n\ \ \ \ \ Returns\ the\ height\ of\ the\ board\ in\ blocks.\n
comment3.params=
comment3.target=int\ getMaxHeight()
comment3.text=\n\ \ \ \ \ Returns\ the\ max\ column\ height\ present\ in\ the\ board.\n\ \ \ \ \ For\ an\ empty\ board\ this\ is\ 0.\n
comment4.params=
comment4.target=void\ sanityCheck()
comment4.text=\n\ \ \ \ \ Checks\ the\ board\ for\ internal\ consistency\ --\ used\n\ \ \ \ \ for\ debugging.\n
comment5.params=piece\ x
comment5.target=int\ dropHeight(Piece,\ int)
comment5.text=\n\ \ \ \ \ Given\ a\ piece\ and\ an\ x,\ returns\ the\ y\n\ \ \ \ \ value\ where\ the\ piece\ would\ come\ to\ rest\n\ \ \ \ \ if\ it\ were\ dropped\ straight\ down\ at\ that\ x.\n\ \ \ \ \ \n\ \ \ \ \ <p>\n\ \ \ \ \ Implementation\:\ use\ the\ skirt\ and\ the\ col\ heights\n\ \ \ \ \ to\ compute\ this\ fast\ --\ O(skirt\ length).\n
comment6.params=x
comment6.target=int\ getColumnHeight(int)
comment6.text=\n\ \ \ \ \ Returns\ the\ height\ of\ the\ given\ column\ --\n\ \ \ \ \ i.e.\ the\ y\ value\ of\ the\ highest\ block\ +\ 1.\n\ \ \ \ \ The\ height\ is\ 0\ if\ the\ column\ contains\ no\ blocks.\n
comment7.params=y
comment7.target=int\ getRowWidth(int)
comment7.text=\n\ \ \ \ \ Returns\ the\ number\ of\ filled\ blocks\ in\n\ \ \ \ \ the\ given\ row.\n
comment8.params=x\ y
comment8.target=boolean\ getGrid(int,\ int)
comment8.text=\n\ \ \ \ \ Returns\ true\ if\ the\ given\ block\ is\ filled\ in\ the\ board.\n\ \ \ \ \ Blocks\ outside\ of\ the\ valid\ width/height\ area\n\ \ \ \ \ always\ return\ true.\n
comment9.params=piece\ x\ y
comment9.target=int\ place(Piece,\ int,\ int)
comment9.text=\n\ \ \ \ \ Attempts\ to\ add\ the\ body\ of\ a\ piece\ to\ the\ board.\n\ \ \ \ \ Copies\ the\ piece\ blocks\ into\ the\ board\ grid.\n\ \ \ \ \ Returns\ PLACE_OK\ for\ a\ regular\ placement,\ or\ PLACE_ROW_FILLED\n\ \ \ \ \ for\ a\ regular\ placement\ that\ causes\ at\ least\ one\ row\ to\ be\ filled.\n\ \ \ \ \ \n\ \ \ \ \ <p>Error\ cases\:\n\ \ \ \ \ If\ part\ of\ the\ piece\ would\ fall\ out\ of\ bounds,\ the\ placement\n\ \ \ \ \ does\ not\ change\ the\ board\ at\ all,\ and\ PLACE_OUT_BOUNDS\ is\ returned.\n\ \ \ \ \ If\ the\ placement\ is\ "bad"\ --interfering\ with\ existing\ blocks\ in\ the\ grid\ --\n\ \ \ \ \ then\ the\ placement\ is\ halted\ partially\ complete\ and\ PLACE_BAD\ is\ returned.\n\ \ \ \ \ An\ undo()\ will\ remove\ the\ bad\ placement.\n
numComments=13
